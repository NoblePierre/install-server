#!/bin/bash

set -e

# === CONFIG ===
# V√©rification du param√®tre du domaine
if [ $# -eq 0 ]; then
    echo "‚ùå Erreur: Domaine du panel requis"
    echo "Usage: $0 <panel_domain>"
    echo "Exemple: $0 panel.mondomaine.com"
    exit 1
fi

PANEL_DOMAIN="$1"
WINGS_BINARY="/usr/local/bin/wings"
WINGS_CONFIG_DIR="/etc/pterodactyl"

# Chargement des variables d'environnement
if [ -f .env ]; then
    echo "üìÑ Chargement du fichier .env..."
    export $(cat .env | grep -v '^#' | xargs)
else
    echo "‚ö†Ô∏è  Fichier .env non trouv√©, cr√©ation depuis env.example..."
    cp env.example .env
    echo "üìù √âdite le fichier .env avec tes configurations, puis relance le script"
    echo "‚è∏Ô∏è  Appuie sur une touche pour √©diter .env..."
    read
    nano .env
    export $(cat .env | grep -v '^#' | xargs)
fi

# Affichage de la configuration
echo "üîß Configuration d√©tect√©e :"
echo "   Panel Domain: $PANEL_DOMAIN"
echo "   Wings Binary: $WINGS_BINARY"
echo "   Wings Config: $WINGS_CONFIG_DIR"
echo ""

echo "üì¶ Mise √† jour syst√®me & installation d√©pendances..."
apt update && apt upgrade -y

# Installation de Docker Engine
apt install -y docker.io

# Installation manuelle de Docker Compose v2
DOCKER_COMPOSE_VERSION="2.24.6"
mkdir -p ~/.docker/cli-plugins
curl -SL "https://github.com/docker/compose/releases/download/v$DOCKER_COMPOSE_VERSION/docker-compose-linux-x86_64" \
    -o ~/.docker/cli-plugins/docker-compose
chmod +x ~/.docker/cli-plugins/docker-compose

# V√©rifie que tout fonctionne
docker compose version

echo "üê≥ D√©marrage des services Docker..."
systemctl enable --now docker

echo "üìÅ Cr√©ation des dossiers n√©cessaires..."
mkdir -p uploads
mkdir -p $WINGS_CONFIG_DIR

echo "üöÄ D√©marrage du Panel Pterodactyl (Docker)..."
docker-compose up -d

echo "‚è≥ Attente du d√©marrage des services..."
sleep 30

echo "üîß Configuration initiale du Panel..."
docker-compose exec panel php artisan key:generate --force
docker-compose exec panel php artisan migrate --seed --force

echo "üßë‚Äçüíª Cr√©ation de l'utilisateur admin..."
echo "‚û°Ô∏è  Acc√®de au panel sur http://$PANEL_DOMAIN"
echo "‚û°Ô∏è  Cr√©e ton compte admin via l'interface web"
echo "‚è∏Ô∏è  Appuie sur une touche quand c'est fait..."
read

echo "üöÄ Installation de Wings (installation native)..."
curl -Lo $WINGS_BINARY https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_amd64
chmod +x $WINGS_BINARY

echo "üîß Configuration Wings..."
echo "‚û°Ô∏è  Cr√©e une instance node via le Panel"
echo "‚û°Ô∏è  R√©cup√®re le config.yml et place-le dans $WINGS_CONFIG_DIR/config.yml"
echo "‚è∏Ô∏è  Appuie sur une touche quand c'est fait..."
read

if [ ! -f "$WINGS_CONFIG_DIR/config.yml" ]; then
    echo "‚ö†Ô∏è  Fichier config.yml non trouv√©, cr√©ation d'un template..."
    cat > $WINGS_CONFIG_DIR/config.yml <<EOF
# Configuration Wings - Remplace par celle g√©n√©r√©e par le Panel
system:
  data: /var/lib/pterodactyl
  sftp:
    bind_port: 2022
  docker:
    network:
      name: pterodactyl_nw
      driver: bridge
    interface: 172.18.0.1
  allowed_mounts: []
  allowed_startup: []
security:
  ssl:
    enabled: false
    certificate: ""
    key: ""
  csrf:
    trusted_origins: []
  allowed_origins: []
api:
  host: 0.0.0.0
  port: 8080
  ssl:
    enabled: false
    certificate: ""
    key: ""
  upload_limit: 100
  remote: https://$PANEL_DOMAIN
  token: ""
EOF
    echo "üìù Template cr√©√© dans $WINGS_CONFIG_DIR/config.yml"
    echo "‚ö†Ô∏è  Remplace le token par celui g√©n√©r√© par le Panel"
    nano $WINGS_CONFIG_DIR/config.yml
fi

echo "üõ†Ô∏è  Cr√©ation du service systemd Wings..."
cat > /etc/systemd/system/wings.service <<EOF
[Unit]
Description=Pterodactyl Wings Daemon
After=docker.service
Requires=docker.service

[Service]
User=root
WorkingDirectory=$WINGS_CONFIG_DIR
ExecStart=$WINGS_BINARY
Restart=always
LimitNOFILE=4096

[Install]
WantedBy=multi-user.target
EOF

systemctl enable --now wings

echo "üîê Configuration du firewall..."
ufw allow 22/tcp
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 2022/tcp  # SFTP
ufw allow 8080/tcp  # Wings API
ufw --force enable

echo -e "\n‚úÖ Installation hybride termin√©e !"
echo "üìä Panel (Docker): http://$PANEL_DOMAIN"
echo "üöÄ Wings (Native): Service actif sur ce node"
echo ""
echo "üìã Commandes utiles :"
echo "   Panel logs: docker-compose logs -f panel"
echo "   Wings status: systemctl status wings"
echo "   Wings logs: journalctl -u wings -f"
echo "   Red√©marrer Panel: docker-compose restart"
echo "   Red√©marrer Wings: systemctl restart wings" 